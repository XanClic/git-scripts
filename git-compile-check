#!/bin/bash
#
# See $desc, below, for program description
#
# Copyright (c) 2013 Red Hat, Inc.
#
# Author(s):
#   Jeff Cody <jcody@redhat.com>
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; under version 2 of the license
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, see <http://www.gnu.org/licenses/gpl-2.0.html>.
#

desc="
$0 iterates through a git commit range, and performs the
following on each commit:
  - make clean
  - configure
  - make

The script will exit and report on first error on any of the above steps,
(except no error checking is performed on 'make clean')

NOTE: while executing, the script will checkout out each commit
      in the range in the current git tree.  On exit, the HEAD
      at the time the script was called is checked out"


# default range is the last commit
range="HEAD^!"
config_opt="--target-list=x86_64-softmmu"
# you may want to have make perform multiple jobs, e.g. -j4
# this is ommitted as the default in case the project makefile
# is not safe for parallel make processes
make_opt=""
deflog="output-$$.log"
logdir=""
logfile=$deflog

usage() {
    echo ""
    echo "$0 [OPTIONS]"
    echo "$desc"
    echo ""
    echo "OPTIONS:"
    echo "      -r git range
            optional; default is '$range'
                    "
    echo "      -c configure options
            optional; default is '$config_opt'
                    "
    echo "      -m make options
            optional; default is '$make_opt'
                    "
    echo "      -d log dir
            optional; default is '$logdir'
            if specifying the log dir, this argument must precede '-l'
                    "
    echo "      -l log filename
            optional; default is output-PROCID, where PROCID is the bash process id
            note: you may specify a full path for the log filename here, and exclude the
                  -d option.
                    "
    echo "      -h help"
}

while getopts ":r:c:m:l:d:h" opt
do
    case $opt in
        r) range=$OPTARG
            ;;
        c) config_opt=$OPTARG
            ;;
        m) make_opt=$OPTARG
            ;;
        d) logdir=$OPTARG
            ;;
        l) logfile=$OPTARG
            ;;
        h) usage
           exit
            ;;
        \?) echo "Unknown option: -$OPTARG" >&2
            usage
            exit 1
            ;;
    esac
done

# append a '/' to logdir if $logdir was specified without one
[[ -n "$logdir" ]] && [[ ${logdir:${#logdir}-1} != "/" ]] && logdir="$logdir/"

logfile="$logdir$logfile"

head=`git rev-parse HEAD`
total=`git rev-list "$range" --count`

echo "log output: $logfile"

date > "$logfile"
echo "git compile check for $range." >> "$logfile"
echo "* configure options='$config_opt'" >> "$logfile"
echo "* make options='$make_opt'" >> "$logfile"
echo "Performing a test compile on $total patches" | tee -a "$logfile"
echo "-------------------------------------------------------------" >> "$logfile"
echo "" | tee -a "$logfile"


# we want to cleanup and return the git tree back to the previous head
trap sigint INT

cleanup() {
    git checkout $head > /dev/null 2>&1
}

sigint() {
    cleanup
    exit 2
}


cnt=1
# don't pipe the git job into read, to avoid subshells
while read hash
do
    txt=`git log --pretty=tformat:"%h: %s" $hash^!`
    echo "$cnt/$total: compiling: $txt" | tee -a "$logfile"
    let cnt=$cnt+1;
    echo "####################" >> "$logfile"
    make clean > /dev/null 2>&1
    git checkout $hash          >> "$logfile" 2>&1 && \
        ./configure $config_opt >> "$logfile" 2>&1 && \
        make $make_opt          >> "$logfile" 2>&1
    if [ $? != 0 ]
    then
        echo "" | tee -a "$logfile"
        echo "ERROR: commit $hash failed to build!" | tee -a "$logfile"
        git show --stat $hash | tee -a "$logfile"
        cleanup
        exit 1
    fi
done < <(git log $range --pretty=tformat:"%H")

echo "
All patches in $range compiled successfully!" | tee -a "$logfile"
cleanup
exit 0
